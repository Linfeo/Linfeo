import telebot
import re

API_TOKEN = '7636596309:AAFequmAPe6tb_cTDK3-9V7KQONlBLzHuiU'
bot = telebot.TeleBot(API_TOKEN)

user_products = {}

@bot.message_handler(commands=['start'])
def start(message):
    try:
        chat_id = message.chat.id
        user_products[chat_id] = []
        bot.send_message(chat_id, "–ü—Ä–∏–≤–µ—Ç! –í–≤–µ–¥–∏ —Ç–æ–≤–∞—Ä—ã –∏ —Ü–µ–Ω—ã")
    except Exception as e:
        handle_error(message, e)

@bot.message_handler(func=lambda message: True)
def handle_message(message):
    try:
        chat_id = message.chat.id

        if message.text.startswith('/up'):
            if not user_products.get(chat_id):
                bot.send_message(chat_id, "–í–∞—à —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø—É—Å—Ç. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã.")
            else:
                bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–∞—Ü–µ–Ω–∫–∏:")
                bot.register_next_step_handler(message, apply_markup)
            return

        items = message.text.split('\n')
        processed_items = []

        for item in items:
            if not item.strip():  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
                processed_items.append({"raw": item, "processed": None})
                continue

            match = re.search(r"(.+?)\s*[-:]*\s*(\d+[.,]?\d*)[^\d]*$", item)
            if match:
                name = match.group(1).strip()
                numeric_price = match.group(2).replace(',', '.')

                try:
                    price_value = float(numeric_price)
                    processed_items.append({
                        "raw": item,
                        "processed": {"name": name, "price": price_value, "raw_price": item}
                    })
                except ValueError:
                    bot.send_message(chat_id, f"–°—Ç—Ä–æ–∫–∞ '{item}' –ø—Ä–æ–ø—É—â–µ–Ω–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ü–µ–Ω—É.")
            else:
                bot.send_message(chat_id, f"–°—Ç—Ä–æ–∫–∞ '{item}' –ø—Ä–æ–ø—É—â–µ–Ω–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ —Ü–µ–Ω—É.")

        user_products[chat_id] = processed_items
        bot.send_message(chat_id, "–¢–æ–≤–∞—Ä—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã. –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /up –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã.")
    except Exception as e:
        handle_error(message, e)

def apply_markup(message):
    try:
        chat_id = message.chat.id
        markup = float(message.text.replace(',', '.')) / 1000

        updated_products = []
        for product in user_products[chat_id]:
            if product["processed"] is None:
                updated_products.append(product["raw"])
                continue

            updated_price = product["processed"]["price"] + markup
            updated_price_str = f"{updated_price:.3f}"

            updated_price_with_suffix = re.sub(
                r"(\d+[.,]?\d*)([^\d]*)$",
                lambda match: f"{updated_price_str}{match.group(2)}",
                product["processed"]["raw_price"]
            )
            updated_products.append(updated_price_with_suffix)

        bot.send_message(chat_id, "\n" + "\n".join(updated_products))
        user_products[chat_id] = []
        bot.send_message(chat_id, "–í—ã –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ –Ω–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã.")
    except ValueError:
        bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—Ü–µ–Ω–∫–∏.")
    except Exception as e:
        handle_error(message, e)

def handle_error(message, error):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏, —á—Ç–æ–±—ã –±–æ—Ç –Ω–µ –∑–∞–≤–µ—Ä—à–∞–ª —Ä–∞–±–æ—Ç—É.
    """
    chat_id = message.chat.id
    bot.send_message(chat_id, (
        "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! üòî\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {str(error)}\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫–æ–º–∞–Ω–¥–µ /start –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ."
    ))
    bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.")
try:
    bot.polling()
except Exception as e:
    print(f"–û—à–∏–±–∫–∞ –≤ polling: {e}")
